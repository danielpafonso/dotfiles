#!/bin/sh

apply_dotfile(){
	# $1 -> source file
	# $2 -> destination file
	# $3 -> folder operation
	mkdir -p $(dirname $2)
	if [ "$3" != "" ]; then
		## check for folder existence
		if [ -d "$2" ]; then
			## check if folder is a symlink
			if [ -L "$2" ]; then
				rm $2
			else
				## backup file
				mv $2 $2.bak
			fi
		fi
	else
		## check for file existence
		if [ -f "$2" ]; then
			## check if file is a symlink
			if [ -L "$2" ]; then
				rm $2
			else
				## backup file
				mv $2 $2.bak
			fi
		fi
	fi

	## create symlink
	if [ $CREATE_SYMLINK -eq 1 ]; then
		ln -s $1 $2
	else
		if [ "$3" != "" ]; then
			cp -r $1 $2
		else
			cp $1 $2
		fi
	fi
}

handle_ctrlc (){
	tput rmcup
	exit 2
}

install_configs(){
	{{INSTALL_DOTFILES}}
	if [ "${{key}}_INSTALL" != " " ]; then
		apply_dotfile "${{key}}_CONFIG" "${{key}}_PATH" {{folder}}
	fi
	{{END}}
	files=""
	{{INSTALL_NOTES}}
	if [ "$NOTES_{{key}}" != " " ]; then
		files="${files} $NOTES_{{key}}_CONFIG"
	fi
	{{END}}
	if [ "$files" != "" ]; then
		## local file
		mkdir -p ./local
		cat $files > ./local/notes.txt
		apply_dotfile "$PWD/local/notes.txt" "$NOTES_PATH"
	fi
}


notes_sub_menu (){
	while true; do
		# clear terminal
		clear
		printf "%s\n\n" "$BANNER"
		# sub menu
		printf "Select Notes to copy.\n"
		printf " 1) [%s] all notes\n" "$NOTES_ALL_INSTALL"
		{{SUB_MENU_NOTES}}
		printf " {{idx}}) [%s] {{menu_entry}}\n" "$NOTES_{{key}}"
		{{END}}
		printf " 0) return to menu\n"
		printf "%s\n" "$logLine"
		logLine=" "
		
		if [ "$CREATE_SYMLINK" -eq 0 ]; then
			printf "> "
		else
			printf "\e[1;36m> \e[m"
		fi
		read choice
		## operate on choice
		case $choice in
			0) return
				;;
			1) if [ "$NOTES_ALL_INSTALL" = " " ]; then
					NOTES_ALL_INSTALL="*"
					{{CHOICE_NOTES_NEWLINE}}
					NOTES_{{key}}="*"
					{{END}}
				else
					NOTES_ALL_INSTALL=" "
					{{CHOICE_NOTES_NEWLINE}}
					NOTES_{{key}}=" "
					{{END}}
				fi
				;;
			{{CHOICE_SUB_MENU_NOTES}}
			{{idx}}) NOTES_{{key}}=$([ "$NOTES_{{key}}" = "*" ] && echo " " || echo "*")
				if {{CHOICE_NOTES_&&}}[ "$NOTES_{{key}}" = "*" ]{{END}}; then
					NOTES_ALL_INSTALL="*"
				elif {{CHOICE_NOTES_&&}}[ "$NOTES_{{key}}" = " " ]{{END}}; then
					NOTES_ALL_INSTALL=" "
				else
					NOTES_ALL_INSTALL="-"
				fi
				;;
			{{END}}
		esac
	done
}

## Banner
BANNER=$(cat << EOF
  ___        _     __  _  _
 |   \  ___ | |_  / _|(_)| | ___
 | |) |/ _ \|  _||  _|| || |/ -_)
 |___/ \___/ \__||_|  |_||_|\___|
     ___            _          _  _
    |_ _| _ _   ___| |_  __ _ | || | ___  _ _
     | | | ' \ (_-<|  _|/ _' || || |/ -_)| '_|
    |___||_||_|/__/ \__|\__,_||_||_|\___||_|
EOF
)

## Variables to control script
CREATE_SYMLINK=0
TPUT=$(which tput)

## load config file
. ./variables.sh

logLine=$(cat << EOF
Enter:
- install to apply changes
- quit to exit without making changes
- help to display the help message

EOF
)

if [ "$TPUT" != "" ]; then
	# save terminal state
	tput smcup
fi

# handle signal 2 (SIGINT)
trap "handle_ctrlc" 2

### Main entrypoint
while true; do
	# clear terminal
	clear
	printf "%s\n\n" "$BANNER"
	## Menu
	printf "Select components to install.\n"
	{{MENU_DOTFILES}}
	printf " {{idx}}) [%s] {{menu_entry}}\n    path: %s\n" "${{key}}_INSTALL" "${{key}}_PATH"
	{{END}}
	{{MENU_NOTES_ALL}}
	printf " {{idx}}) [%s] {{menu_entry}} (sub menu)\n    path: %s\n" "$NOTES_ALL_INSTALL" "$NOTES_PATH"
	{{END}}
	printf "%s\n" "$logLine"
	logLine=" "

	if [ "$CREATE_SYMLINK" -eq 0 ]; then
		printf "> "
	else
		printf "\e[1;36m> \e[m"
	fi
	read choice
	## operate on choice
	case $choice in
		{{CHOICE_DOTFILES}}
		{{idx}}) {{key}}_INSTALL=$([ "${{key}}_INSTALL" = "*" ] && echo " " || echo "*")
			;;
		"path {{idx}}")
			printf "\n {{prompt_path}} path> "
			read {{key}}_PATH
			;;
		{{END}}
		{{CHOICE_NOTES_IDX}} 
		{{idx}}) notes_sub_menu
			;;
		"path {{idx}}")
			printf "\n {{prompt_path}} path> "
			read {{key}}_PATH
			;;
		{{END}}
		"help"|"h")
			logLine=$(printf "\n- Enter number to toogle config to install\n- Enter path folowed by rhe option number to modify the instalation path. ex: path 1\n ")
			;;
		"symlink") if [ "$CREATE_SYMLINK" -eq 0 ]; then
				CREATE_SYMLINK=1
				logLine=$(printf "\nInstall will create symlinks to configurations\n")
			else
				CREATE_SYMLINK=0
				logLine=$(printf "\nInstall will create copy of configurations\n")
			fi
			;;
		"quit"|"q") break ;;
		9) break ;;
		*) logLine=$(printf "\e[0;31mInvalid option selected\e[m\n")
			;;
	esac
done

if [ "$TPUT" != "" ]; then
	# restore terminal
	tput rmcup
fi
